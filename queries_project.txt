DROP TABLE IF EXISTS ticket, payment, passengers, reservation, contact_person, passenger, flight, weekly_flight, route, weekday, airport, location, year, payer;
DROP PROCEDURE IF EXISTS addYear;
DROP PROCEDURE IF EXISTS addDay;
DROP PROCEDURE IF EXISTS addDestination;
DROP PROCEDURE IF EXISTS addRoute;
DROP PROCEDURE IF EXISTS addFlight;
DROP PROCEDURE IF EXISTS addReservation;
DROP PROCEDURE IF EXISTS addPassenger;
DROP PROCEDURE IF EXISTS addContact;
DROP PROCEDURE IF EXISTS addPayment;

DROP FUNCTION IF EXISTS calculateFreeSeats;
DROP FUNCTION IF EXISTS calculatePrice;

DROP VIEW if EXISTS allFlights;

# 2)

# Creating table for the locations.
CREATE TABLE location (location varchar(30), country varchar(30), CONSTRAINT pk_location PRIMARY KEY(location));

# Creating table for the airports.
CREATE TABLE airport (airport_code varchar(3), location varchar(30) NOT NULL, CONSTRAINT pk_airport PRIMARY KEY(airport_code), CONSTRAINT fk_airport_location FOREIGN KEY(location) REFERENCES location(location));

# Creating table for the year.
CREATE TABLE year (year integer, profit_factor double, CONSTRAINT pk_year PRIMARY KEY(year));

# Creating table for the weekday.
CREATE TABLE weekday (day varchar(10), year integer NOT NULL, weekday_factor double, CONSTRAINT pk_day_year PRIMARY KEY(day, year), CONSTRAINT fk_weekday_year FOREIGN KEY(year) REFERENCES year(year));

# Creating table for the route.
CREATE TABLE route (id integer AUTO_INCREMENT, year integer NOT NULL, departure varchar(3) NOT NULL, arrival varchar(3) NOT NULL, route_price double, CONSTRAINT pk_id PRIMARY KEY(id), CONSTRAINT fk_route_year FOREIGN KEY(year) REFERENCES year(year), CONSTRAINT fk_arrival_airport FOREIGN KEY(arrival) REFERENCES airport(airport_code), CONSTRAINT fk_departure_airport FOREIGN KEY(departure) REFERENCES airport(airport_code), CONSTRAINT uc_userroute UNIQUE(year, departure, arrival));

# Creating table for the weekly_flight.
CREATE TABLE weekly_flight (id integer AUTO_INCREMENT, day varchar(10) NOT NULL, year integer NOT NULL, route integer NOT NULL, time time, CONSTRAINT pk_id PRIMARY KEY(id), CONSTRAINT fk_weeklyflight_weekday FOREIGN KEY(day, year) REFERENCES weekday(day, year), CONSTRAINT fk_weeklyflight_route FOREIGN KEY(route) REFERENCES route(id));

# Creating table for the flight.
CREATE TABLE flight (flightnr integer AUTO_INCREMENT, week integer, weekly_flight integer NOT NULL, CONSTRAINT pk_flightnr PRIMARY KEY(flightnr), CONSTRAINT fk_flight_weeklyflight FOREIGN KEY(weekly_flight) REFERENCES weekly_flight(id));

# Creating table for the passenger.
CREATE TABLE passenger(passportnr integer, name varchar(30), CONSTRAINT pk_passportnr PRIMARY KEY(passportnr));

# Creating table for the contact_person
CREATE TABLE contact_person(passportnr integer,  email varchar(30), phonenr bigint, CONSTRAINT pk_passportnr PRIMARY KEY(passportnr), CONSTRAINT fk_contactperson_passportnr FOREIGN KEY(passportnr) REFERENCES passenger(passportnr));

# Creating table for the reservation.
CREATE TABLE reservation (reservationnr integer, nrpassengers integer, flightnr integer NOT NULL, contact_person integer, CONSTRAINT pk_reservationnr PRIMARY KEY(reservationnr), CONSTRAINT fk_reservation_flight FOREIGN KEY(flightnr) REFERENCES flight(flightnr), CONSTRAINT fk_reservation_contactperson FOREIGN KEY(contact_person) REFERENCES contact_person(passportnr));

# Creating table for the passengers.
CREATE TABLE passengers(reservationnr integer, passportnr integer, CONSTRAINT pk_reservationnr_passportnr PRIMARY KEY(reservationnr, passportnr), CONSTRAINT fk_passengers_passenger FOREIGN KEY(passportnr) REFERENCES passenger(passportnr), CONSTRAINT fk_passengers_reservation FOREIGN KEY(reservationnr) REFERENCES reservation(reservationnr));

# Creating table for the payer.
CREATE TABLE payer(creditcardnr bigint, cardholder varchar(30), CONSTRAINT pk_creditcardnr PRIMARY KEY(creditcardnr));

# Creating table payment
CREATE TABLE payment(reservationnr integer NOT NULL, total_price double, creditcardnr bigint NOT NULL, CONSTRAINT pk_reservationnr PRIMARY KEY(reservationnr), CONSTRAINT fk_payment_reservation FOREIGN KEY(reservationnr) REFERENCES reservation(reservationnr), CONSTRAINT fk_payment_payer FOREIGN KEY(creditcardnr) REFERENCES payer(creditcardnr)); 

# Creating table ticket
CREATE TABLE ticket(id integer AUTO_INCREMENT, reservationnr integer NOT NULL, passportnr integer NOT NULL, CONSTRAINT pk_id PRIMARY KEY(id), CONSTRAINT fk_ticket_payment FOREIGN KEY(reservationnr) REFERENCES payment(reservationnr), CONSTRAINT fk_ticket_passenger FOREIGN KEY(passportnr) REFERENCES passenger(passportnr));


# 3)


# (a) Insert a year

delimiter //
CREATE PROCEDURE addYear(IN year INT, IN factor DOUBLE) 
BEGIN 
INSERT INTO year
VALUES(year, factor);
END;
//



# (b) Insert a day


CREATE PROCEDURE addDay(IN year INT, IN day VARCHAR(10), IN factor DOUBLE) 
BEGIN 
INSERT INTO weekday
VALUES(day, year, factor);
END;
//



# (c) Insert a destination


CREATE PROCEDURE addDestination(IN airport_code VARCHAR(3), IN name VARCHAR(30), IN country VARCHAR(30))
BEGIN
INSERT INTO location
VALUES(name, country);
INSERT INTO airport
VALUES(airport_code, name);
END;
//



# (d) Insert a route


CREATE PROCEDURE addRoute(IN departure_airport_code VARCHAR(3), IN arrival_airport_code VARCHAR(3), IN year INT, IN routeprice DOUBLE)
BEGIN
INSERT INTO route
VALUES(NULL, year, departure_airport_code, arrival_airport_code, routeprice);
END;
//



# (e) Insert a flight


CREATE PROCEDURE addFlight(IN departure_airport_code VARCHAR(3), IN arrival_airport_code VARCHAR(3), IN year_in INT, IN day VARCHAR(10), IN departure_time TIME)
BEGIN
DECLARE route_id INT; 
DECLARE cnt INT;
DECLARE last_id INT;

select id INTO route_id from route where departure = departure_airport_code AND arrival = arrival_airport_code AND year=year_in;
INSERT INTO weekly_flight
VALUES(NULL, day, year_in, route_id, departure_time);

# add 52 flights to flight entity

SET last_id = LAST_INSERT_ID();
SET cnt=0;
WHILE cnt < 52 DO
	SET cnt = cnt + 1;
	INSERT INTO flight
	VALUES(NULL, cnt, last_id);
END WHILE;
END;
//



# 4) 

# a) calculate number of available seats for a certain flight


CREATE FUNCTION calculateFreeSeats(flightnumber INT)
RETURNS INT 
BEGIN
DECLARE seats_bought INT;
SELECT COUNT(*) INTO seats_bought from ticket where reservationnr in (SELECT reservationnr from reservation where flightnumber = flightnr);
RETURN 40 - seats_bought;
END;
//




# b)

CREATE FUNCTION calculatePrice(flightnumber INT)
RETURNS DOUBLE
BEGIN
DECLARE routePrice DOUBLE;
DECLARE weekdayFactor DOUBLE;
DECLARE profitFactor DOUBLE;
DECLARE booked_passengers INT;
DECLARE weeklyFlight INT; 
DECLARE totalPrice DOUBLE;

SELECT weekly_flight INTO weeklyFlight from flight where flightnumber = flightnr;
SELECT route_price INTO routePrice from route where id =(SELECT route from weekly_flight where id = weeklyFlight);

SELECT y1.profit_factor, w1.weekday_factor INTO profitFactor, weekdayFactor from weekday w1, weekly_flight wf, year y1 where w1.day = wf.day AND w1.year = wf.year AND wf.id = weeklyFlight AND y1.year = w1.year;

SET booked_passengers = 40 - calculateFreeSeats(flightnumber);
SET totalPrice = routePrice * weekdayFactor *  profitFactor * (booked_passengers+1)/(40); 
RETURN totalPrice;
END;
//





# 5)

CREATE TRIGGER generate_tickets AFTER INSERT ON payment

FOR EACH ROW 
BEGIN
	DECLARE nr_passengers INT;
	DECLARE ticket_nr INT;
	DECLARE passport_nr INT;
	SELECT COUNT(*) INTO nr_passengers from passengers where NEW.reservationnr = reservationnr;
	WHILE nr_passengers > 0 DO
		SET nr_passengers = nr_passengers -1;
		inner_loop: WHILE 1 > 0 DO
			SET ticket_nr = ROUND((RAND() * (9999999 - 1))+1);
			IF (SELECT COUNT(*) from ticket where id = ticket_nr) = 0 THEN
				LEAVE inner_loop;
			END IF;
		END WHILE;
		SELECT passportnr INTO passport_nr FROM passengers where NEW.reservationnr = reservationnr LIMIT nr_passengers,1; 
		INSERT INTO ticket
		VALUES(ticket_nr, NEW.reservationnr, passport_nr);
	END WHILE;
END;
//



# 6)


# a) Create a reservation on a specific flight

CREATE PROCEDURE addReservation(IN departure_airport_code VARCHAR(3), IN arrival_airport_code VARCHAR(3), IN year_in INTEGER, IN week_in INTEGER, IN day_in VARCHAR(10), IN time_in TIME, IN number_of_passengers INT, OUT output_reservation_nr INTEGER)
BEGIN
DECLARE flight_nr INT;
SELECT flightnr INTO flight_nr from flight where week = week_in AND weekly_flight = (SELECT id FROM weekly_flight where time = time_in AND year = year_in AND day = day_in AND route = (SELECT id FROM route where year = year_in AND arrival = arrival_airport_code AND departure = departure_airport_code));
IF (flight_nr IS NULL) THEN
	SELECT "There exist no flight for the given route, date and time" as "Message";
ELSEIF calculateFreeSeats(flight_nr) >= number_of_passengers THEN
	inner_loop: WHILE 1 > 0 DO
			SET output_reservation_nr = ROUND((RAND() * (9999999 - 1))+1);
			IF (SELECT COUNT(*) from reservation where reservationnr = output_reservation_nr) = 0 THEN
				LEAVE inner_loop;
			END IF;
		END WHILE;
	INSERT INTO reservation
	VALUES(output_reservation_nr, number_of_passengers, flight_nr, NULL);
	SELECT "OK" as "Message";
ELSE
	SELECT "There are not enough seats available on the chosen flight" as "Message";
END IF;
END;
//



# b) Add a passenger to a reservation


CREATE PROCEDURE addPassenger(IN reservation_nr INTEGER, IN passport_nr INTEGER, IN name VARCHAR(30))
BEGIN
IF (SELECT COUNT(*) FROM reservation WHERE reservationnr = reservation_nr) = 0 THEN
	SELECT "The given reservation number does not exist" as "Message";
ELSEIF (SELECT COUNT(*) FROM payment WHERE reservationnr = reservation_nr) > 0 THEN
	SELECT "The booking has already been payed and no futher passengers can be added" as "Message";
ELSEIF ((SELECT nrpassengers FROM reservation WHERE reservationnr = reservation_nr) - (SELECT Count(*) FROM passengers WHERE reservationnr = reservation_nr)) > 0 THEN
	IF ((SELECT COUNT(*) FROM passenger WHERE passportnr = passport_nr) = 0) THEN
		INSERT INTO passenger
		VALUES(passport_nr, name);
	END IF;
	INSERT INTO passengers
	VALUES(reservation_nr, passport_nr);
	SELECT "OK" as "Message";
ELSE
	SELECT "The reservation is full" as "Message";
END IF;
END;
//



# c) Add contact


CREATE PROCEDURE addContact(IN reservation_nr INTEGER, IN passport_nr INTEGER, IN email VARCHAR(30), IN phone BIGINT)
BEGIN
IF (SELECT COUNT(*) FROM reservation WHERE reservationnr = reservation_nr) = 0 THEN
	SELECT "The given reservation number does not exist" as "Message";
ELSEIF (SELECT COUNT(*) FROM passengers WHERE passportnr = passport_nr AND reservationnr = reservation_nr) = 1 THEN
	IF ((SELECT contact_person FROM reservation where reservationnr = reservation_nr) IS NOT NULL) THEN
		SELECT "Reservation already has a contact person" as "Message";
	ELSE
		IF (SELECT COUNT(*) FROM contact_person WHERE passportnr = passport_nr) = 0 THEN
			INSERT INTO contact_person
			VALUES(passport_nr, email, phone);
		END IF;
		UPDATE reservation
		SET contact_person = passport_nr WHERE reservationnr = reservation_nr;
		SELECT "OK" as "Message";
	END IF;
ELSE 
	SELECT "The person is not a passenger of the reservation" as "Message";
END IF;
END;
//



# d) Add payment


CREATE PROCEDURE addPayment(IN reservation_nr INTEGER, IN cardholder_name VARCHAR(30), IN credit_card_number BIGINT)
BEGIN
declare free_seats_available INT;
declare total_passengers INT;
declare flight_nr INT;
SELECT flightnr INTO flight_nr FROM reservation WHERE reservationnr = reservation_nr;
IF (flight_nr IS NOT NULL) THEN
	SET free_seats_available = calculateFreeSeats(flight_nr);
	IF ((SELECT contact_person FROM reservation WHERE reservationnr = reservation_nr) IS NULL) THEN
		SELECT "The reservation has no contact yet" as "Message";
	ELSEIF free_seats_available >= (SELECT nrpassengers from reservation WHERE reservationnr = reservation_nr) THEN
		IF (SELECT COUNT(*) FROM payer WHERE creditcardnr = credit_card_number) = 0 THEN
			INSERT INTO payer
			VALUES(credit_card_number, cardholder_name);
		END IF;
		SELECT COUNT(*) INTO total_passengers FROM passengers where reservationnr = reservation_nr;
		INSERT INTO payment
		VALUES(reservation_nr, total_passengers * calculatePrice(flight_nr), credit_card_number); 
		SELECT "OK" as "Message";
	ELSE
		DELETE FROM passengers WHERE reservationnr = reservation_nr;
		DELETE FROM reservation WHERE reservationnr = reservation_nr; 
		SELECT "There are not enough seats available on the flight anymore, deleting reservation" as "Message";
	END IF;
ELSE
	SELECT "The given reservation number does not exist" as "Message";
END IF;
END;
//
delimiter ;

# 7) Create a view

CREATE VIEW allFlights AS SELECT a1.location as departure_city_name, a2.location as destination_city_name, weekly_flight.time as departure_time, weekly_flight.day as departure_day, flight.week as departure_week, weekly_flight.year as departure_year, calculateFreeSeats(flight.flightnr) as nr_of_free_seats, calculatePrice(flight.flightnr) as current_price_per_seat FROM airport a1, airport a2, route, weekly_flight, flight WHERE flight.weekly_flight = weekly_flight.id AND weekly_flight.route = route.id AND route.departure = a1.airport_code AND route.arrival = a2.airport_code group by flight.flightnr;










